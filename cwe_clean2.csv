id,name,description,extended_description,common_consequences_scope,common_consequences_impact,Clean_Description,Access_Control,Integrity
6,J2EE Misconfiguration: Insufficient Session-ID Length,The J2EE application is configured to use an insufficient session ID length.,"If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.",Access Control,['Gain Privileges or Assume Identity'],j2ee application configured use insufficient session id length,1,0
13,ASP.NET Misconfiguration: Password in Configuration File,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.,,Access Control,['Gain Privileges or Assume Identity'],storing plaintext password configuration file allows anyone read file access passwordprotected resource making easy target attackers,1,0
42,Path Equivalence: 'filename.' (Trailing Dot),A software system that accepts path input in the form of trailing dot ('filedir.') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,,Access Control,['Bypass Protection Mechanism'],software system accepts path input form trailing dot filedir without appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended locations access arbitrary files,1,0
84,Improper Neutralization of Encoded URI Schemes in a Web Page,The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.,,Integrity,['Unexpected State'],web application improperly neutralizes usercontrolled input executable script disguised uri encodings,0,1
93,Improper Neutralization of CRLF Sequences ('CRLF Injection'),"The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",,Integrity,['Modify Application Data'],software uses crlf carriage return line feeds special element separate lines records neutralize incorrectly neutralizes crlf sequences inputs,0,1
102,Struts: Duplicate Validation Forms,"The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.","If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.",Integrity,['Unexpected State'],application uses multiple validation forms might cause struts validator validate form programmer expect,0,1
105,Struts: Form Field Without Validator,"The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.","Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",Integrity,"['Unexpected State', 'Bypass Protection Mechanism']",application form field validated corresponding validation form introduce weaknesses related insufficient input validation,0,1
106,Struts: Plug-in Framework not in Use,"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.","
            ",Integrity,['Unexpected State'],application use input validation framework struts validator greater risk introducing weaknesses related insufficient input validation,0,1
109,Struts: Validator Turned Off,"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",,Access Control,['Bypass Protection Mechanism'],automatic filtering via struts bean turned disables struts validator custom validation logic exposes application weaknesses related insufficient input validation,1,0
111,Direct Use of Unsafe JNI,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.","Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.",Access Control,['Bypass Protection Mechanism'],java application uses java native interface jni call code written another programming language expose application weaknesses code even weaknesses occur java,1,0
112,Missing XML Validation,The software accepts XML from an untrusted source but does not validate the XML against the proper schema.,"Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.",Integrity,['Unexpected State'],software accepts xml untrusted source validate xml proper schema,0,1
115,Misinterpretation of Input,"The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",,Integrity,['Unexpected State'],software misinterprets input whether attacker another product securityrelevant fashion,0,1
140,Improper Neutralization of Delimiters,The software does not neutralize or incorrectly neutralizes delimiters.,,Integrity,['Unexpected State'],software neutralize incorrectly neutralizes delimiters,0,1
141,Improper Neutralization of Parameter/Argument Delimiters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.","As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted parameter argument delimiters sent downstream component,0,1
142,Improper Neutralization of Value Delimiters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.","As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted value delimiters sent downstream component,0,1
143,Improper Neutralization of Record Delimiters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.","As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted record delimiters sent downstream component,0,1
144,Improper Neutralization of Line Delimiters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.","As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted line delimiters sent downstream component,0,1
145,Improper Neutralization of Section Delimiters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.","
            ",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted section delimiters sent downstream component,0,1
147,Improper Neutralization of Input Terminators,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.","For example, a ""."" in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted input terminators sent downstream component,0,1
148,Improper Neutralization of Input Leaders,"The application does not properly handle when a leading character or sequence (""leader"") is missing or malformed, or if multiple leaders are used when only one should be allowed.",,Integrity,['Unexpected State'],application properly handle leading character sequence leader missing malformed multiple leaders used allowed,0,1
149,Improper Neutralization of Quoting Syntax,"Quotes injected into an application can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",,Integrity,['Unexpected State'],quotes injected application used compromise system data parsed injectedabsentduplicatemalformed use quotes may cause process unexpected actions,0,1
150,"Improper Neutralization of Escape, Meta, or Control Sequences","The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.","As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted escape meta control character sequences sent downstream component,0,1
151,Improper Neutralization of Comment Delimiters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.",,Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted comment delimiters sent downstream component,0,1
152,Improper Neutralization of Macro Symbols,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",,Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted macro symbols sent downstream component,0,1
153,Improper Neutralization of Substitution Characters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",,Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted substitution characters sent downstream component,0,1
154,Improper Neutralization of Variable Name Delimiters,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.","As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: ""$"" for an environment variable.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted variable delimiters sent downstream component,0,1
155,Improper Neutralization of Wildcards or Matching Symbols,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.","As data is parsed, an injected element may cause the process to take unexpected actions.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted wildcards matching symbols sent downstream component,0,1
156,Improper Neutralization of Whitespace,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.","This can include space, tab, etc.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes special elements could interpreted whitespace sent downstream component,0,1
157,Failure to Sanitize Paired Delimiters,"The software does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.","
            ",Integrity,['Unexpected State'],software properly handle characters used mark beginning ending group entities parentheses brackets braces,0,1
158,Improper Neutralization of Null Byte or NUL Character,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.","As data is parsed, an injected NUL character or null byte may cause the software to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes nul characters null bytes sent downstream component,0,1
159,Improper Handling of Invalid Use of Special Elements,"The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",,Integrity,['Unexpected State'],product properly filter remove quote otherwise manage invalid use special elements usercontrolled input could cause adverse effect behavior integrity,0,1
160,Improper Neutralization of Leading Special Elements,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes leading special elements could interpreted unexpected ways sent downstream component,0,1
161,Improper Neutralization of Multiple Leading Special Elements,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes multiple leading special elements could interpreted unexpected ways sent downstream component,0,1
162,Improper Neutralization of Trailing Special Elements,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes trailing special elements could interpreted unexpected ways sent downstream component,0,1
163,Improper Neutralization of Multiple Trailing Special Elements,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes multiple trailing special elements could interpreted unexpected ways sent downstream component,0,1
164,Improper Neutralization of Internal Special Elements,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes internal special elements could interpreted unexpected ways sent downstream component,0,1
165,Improper Neutralization of Multiple Internal Special Elements,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.",Integrity,['Unexpected State'],software receives input upstream component neutralize incorrectly neutralizes multiple internal special elements could interpreted unexpected ways sent downstream component,0,1
167,Improper Handling of Additional Special Element,"The software receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.",,Integrity,['Unexpected State'],software receives input upstream component handle incorrectly handles additional unexpected special element provided,0,1
172,Encoding Error,"The software does not properly encode or decode the data, resulting in unexpected values.",,Integrity,['Unexpected State'],software properly encode decode data resulting unexpected values,0,1
173,Improper Handling of Alternate Encoding,The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.,,Access Control,['Bypass Protection Mechanism'],software properly handle input uses alternate encoding valid control sphere input sent,1,0
175,Improper Handling of Mixed Encoding,The software does not properly handle when the same input uses several different (mixed) encodings.,,Integrity,['Unexpected State'],software properly handle input uses several different mixed encodings,0,1
176,Improper Handling of Unicode Encoding,The software does not properly handle when an input contains Unicode encoding.,,Integrity,['Unexpected State'],software properly handle input contains unicode encoding,0,1
177,Improper Handling of URL Encoding (Hex Encoding),The software does not properly handle when all or part of an input has been URL encoded.,,Integrity,['Unexpected State'],software properly handle part input url encoded,0,1
178,Improper Handling of Case Sensitivity,"The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.","
            ",Access Control,['Bypass Protection Mechanism'],software properly account differences case sensitivity accessing determining properties resource leading inconsistent results,1,0
180,Incorrect Behavior Order: Validate Before Canonicalize,"The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step.","This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",Access Control,['Bypass Protection Mechanism'],software validates input canonicalized prevents software detecting data becomes invalid canonicalization step,1,0
181,Incorrect Behavior Order: Validate Before Filter,"The software validates data before it has been filtered, which prevents the software from detecting data that becomes invalid after the filtering step.","This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",Access Control,['Bypass Protection Mechanism'],software validates data filtered prevents software detecting data becomes invalid filtering step,1,0
182,Collapse of Data into Unsafe Value,"The software filters data in a way that causes it to be reduced or ""collapsed"" into an unsafe value that violates an expected security property.",,Access Control,['Bypass Protection Mechanism'],software filters data way causes reduced collapsed unsafe value violates expected security property,1,0
183,Permissive List of Allowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",,Access Control,['Bypass Protection Mechanism'],product implements protection mechanism relies list inputs properties inputs explicitly allowed policy inputs assumed safe list permissive allows input unsafe leading resultant weaknesses,1,0
184,Incomplete List of Disallowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.","Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands.  However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.",Access Control,['Bypass Protection Mechanism'],product implements protection mechanism relies list inputs properties inputs allowed policy otherwise require action neutralize additional processing takes place list incomplete leading resultant weaknesses,1,0
186,Overly Restrictive Regular Expression,"A regular expression is overly restrictive, which prevents dangerous values from being detected.","This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/.  This expression is not ""complex"" but the value ""9"" is not matched when maybe the programmer planned to check for it.",Access Control,['Bypass Protection Mechanism'],regular expression overly restrictive prevents dangerous values detected,1,0
195,Signed to Unsigned Conversion Error,"The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.","
            ",Integrity,['Unexpected State'],software uses signed primitive performs cast unsigned primitive produce unexpected value value signed primitive represented using unsigned primitive,0,1
197,Numeric Truncation Error,Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.,"When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.",Integrity,['Modify Memory'],truncation errors occur primitive cast primitive smaller size data lost conversion,0,1
198,Use of Incorrect Byte Ordering,"The software receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",,Integrity,['Unexpected State'],software receives input upstream component account byte ordering bigendian littleendian processing input causing incorrect number value used,0,1
229,Improper Handling of Values,"The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",,Integrity,['Unexpected State'],software properly handle expected number values parameters fields arguments provided input values undefined,0,1
230,Improper Handling of Missing Values,"The software does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.",,Integrity,['Unexpected State'],software handle incorrectly handles parameter field argument specified associated value missing ie empty blank null,0,1
231,Improper Handling of Extra Values,The software does not handle or incorrectly handles when more values are provided than expected.,,Integrity,['Unexpected State'],software handle incorrectly handles values provided expected,0,1
232,Improper Handling of Undefined Values,"The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",,Integrity,['Unexpected State'],software handle incorrectly handles value defined supported associated parameter field argument,0,1
233,Improper Handling of Parameters,"The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",,Integrity,['Unexpected State'],software properly handle expected number parameters fields arguments provided input parameters undefined,0,1
235,Improper Handling of Extra Parameters,"The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",,Integrity,['Unexpected State'],software handle incorrectly handles number parameters fields arguments exceeds expected amount,0,1
236,Improper Handling of Undefined Parameters,"The software does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",,Integrity,['Unexpected State'],software handle incorrectly handles particular parameter field argument defined supported product,0,1
237,Improper Handling of Structural Elements,The software does not handle or incorrectly handles inputs that are related to complex structures.,,Integrity,['Unexpected State'],software handle incorrectly handles inputs related complex structures,0,1
238,Improper Handling of Incomplete Structural Elements,The software does not handle or incorrectly handles when a particular structural element is not completely specified.,,Integrity,['Unexpected State'],software handle incorrectly handles particular structural element completely specified,0,1
256,Unprotected Storage of Credentials,Storing a password in plaintext may result in a system compromise.,Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.,Access Control,['Gain Privileges or Assume Identity'],storing password plaintext may result system compromise,1,0
258,Empty Password in Configuration File,Using an empty string as a password is insecure.,,Access Control,['Gain Privileges or Assume Identity'],using empty string password insecure,1,0
259,Use of Hard-coded Password,"The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.","
            ",Access Control,['Gain Privileges or Assume Identity'],software contains hardcoded password uses inbound authentication outbound communication external components,1,0
260,Password in Configuration File,The software stores a password in a configuration file that might be accessible to actors who do not know the password.,"This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.",Access Control,['Gain Privileges or Assume Identity'],software stores password configuration file might accessible actors know password,1,0
261,Weak Encoding for Password,Obscuring a password with a trivial encoding does not protect the password.,"Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.",Access Control,['Gain Privileges or Assume Identity'],obscuring password trivial encoding protect password,1,0
262,Not Using Password Aging,"If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner.","Security experts have often recommended that users change their passwords regularly and avoid reusing passwords. Although this can be an effective mitigation, if the expiration window is too short, it can cause users to generate poor or predictable passwords. As such, it is important to discourage creating similar passwords. It is also useful to have a password aging mechanism that notifies users when passwords are considered old and requests that they replace them with new, strong passwords. Companion documentation which stresses how important this practice is can help users understand and better support this approach.",Access Control,['Gain Privileges or Assume Identity'],mechanism place managing password aging users incentive update passwords timely manner,1,0
263,Password Aging with Long Expiration,Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.,"Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.",Access Control,['Gain Privileges or Assume Identity'],allowing password aging occur unchecked result possibility diminished password integrity,1,0
266,Incorrect Privilege Assignment,"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",,Access Control,['Gain Privileges or Assume Identity'],product incorrectly assigns privilege particular actor creating unintended sphere control actor,1,0
267,Privilege Defined With Unsafe Actions,"A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",,Access Control,['Gain Privileges or Assume Identity'],particular privilege role capability right used perform unsafe actions intended even assigned correct entity,1,0
268,Privilege Chaining,"Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",,Access Control,['Gain Privileges or Assume Identity'],two distinct privileges roles capabilities rights combined way allows entity perform unsafe actions would allowed without combination,1,0
269,Improper Privilege Management,"The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",,Access Control,['Gain Privileges or Assume Identity'],software properly assign modify track check privileges actor creating unintended sphere control actor,1,0
270,Privilege Context Switching Error,The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.,,Access Control,['Gain Privileges or Assume Identity'],software properly manage privileges switching different contexts different privileges spheres control,1,0
282,Improper Ownership Management,"The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",,Access Control,['Gain Privileges or Assume Identity'],software assigns wrong ownership properly verify ownership object resource,1,0
283,Unverified Ownership,The software does not properly verify that a critical resource is owned by the proper entity.,,Access Control,['Gain Privileges or Assume Identity'],software properly verify critical resource owned proper entity,1,0
288,Authentication Bypass Using an Alternate Path or Channel,"A product requires authentication, but the product has an alternate path or channel that does not require authentication.",,Access Control,['Bypass Protection Mechanism'],product requires authentication product alternate path channel require authentication,1,0
289,Authentication Bypass by Alternate Name,"The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.",,Access Control,['Bypass Protection Mechanism'],software performs authentication based resource accessed actor performing access properly check possible names resource actor,1,0
290,Authentication Bypass by Spoofing,This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.,,Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",attackfocused weakness caused improperly implemented authentication schemes subject spoofing attacks,1,0
293,Using Referer Field for Authentication,"The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",,Access Control,['Gain Privileges or Assume Identity'],referer field http requests easily modified valid means message integrity checking,1,0
294,Authentication Bypass by Capture-replay,A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).,"Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.",Access Control,['Gain Privileges or Assume Identity'],capturereplay flaw exists design software makes possible malicious user sniff network traffic bypass authentication replaying server question effect original message minor changes,1,0
301,Reflection Attack in an Authentication Protocol,Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.,"A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol.",Access Control,['Gain Privileges or Assume Identity'],simple authentication protocols subject reflection attacks malicious user use target machine impersonate trusted user,1,0
302,Authentication Bypass by Assumed-Immutable Data,"The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.",,Access Control,['Bypass Protection Mechanism'],authentication scheme implementation uses key data elements assumed immutable controlled modified attacker,1,0
303,Incorrect Implementation of Authentication Algorithm,"The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.",This incorrect implementation may allow authentication to be bypassed.,Access Control,['Bypass Protection Mechanism'],requirements software dictate use established authentication algorithm implementation algorithm incorrect,1,0
305,Authentication Bypass by Primary Weakness,"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",,Access Control,['Bypass Protection Mechanism'],authentication algorithm sound implemented mechanism bypassed result separate weakness primary authentication error,1,0
307,Improper Restriction of Excessive Authentication Attempts,"The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks.",,Access Control,['Bypass Protection Mechanism'],software implement sufficient measures prevent multiple failed authentication attempts within short time frame making susceptible brute force attacks,1,0
308,Use of Single-factor Authentication,The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.,"While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.",Access Control,['Bypass Protection Mechanism'],use singlefactor authentication lead unnecessary risk compromise compared benefits dualfactor authentication scheme,1,0
309,Use of Password System for Primary Authentication,"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",,Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",use password systems primary means authentication may subject several flaws shortcomings reducing effectiveness mechanism,1,0
321,Use of Hard-coded Cryptographic Key,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,,Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",use hardcoded cryptographic key significantly increases possibility encrypted data may recovered,1,0
323,"Reusing a Nonce, Key Pair in Encryption",Nonces should be used for the present occasion and only once.,,Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",nonces used present occasion,1,0
324,Use of a Key Past its Expiration Date,"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.","While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",product uses cryptographic key password past expiration date diminishes safety significantly increasing timing window cracking attacks key,1,0
328,Reversible One-Way Hash,"The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques.","This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.",Access Control,['Bypass Protection Mechanism'],product uses hashing algorithm produces hash value used determine original input find input produce hash efficiently brute force techniques,1,0
338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.","
            ",Access Control,['Bypass Protection Mechanism'],product uses pseudorandom number generator prng security context prngs algorithm cryptographically strong,1,0
348,Use of Less Trusted Source,"The software has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",,Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",software two different sources data information uses source less support verification less trusted less resistant attack,1,0
350,Reliance on Reverse DNS Resolution for a Security-Critical Action,"The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.","
            ",Access Control,"['Gain Privileges or Assume Identity', 'Bypass Protection Mechanism']",software performs reverse dns resolution ip address obtain hostname make security decision properly ensure ip address truly associated hostname,1,0
358,Improperly Implemented Security Check for Standard,"The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",,Access Control,['Bypass Protection Mechanism'],software implement incorrectly implements securityrelevant checks specified design standardized algorithm protocol technique,1,0
374,Passing Mutable Objects to an Untrusted Method,The program sends non-cloned mutable data as an argument to a method or function.,"The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.",Integrity,['Modify Memory'],program sends noncloned mutable data argument method function,0,1
384,Session Fixation,"Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.","
            ",Access Control,['Gain Privileges or Assume Identity'],authenticating user otherwise establishing new user session without invalidating existing session identifier gives attacker opportunity steal authenticated sessions,1,0
419,Unprotected Primary Channel,"The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",,Access Control,"['Gain Privileges or Assume Identity', 'Bypass Protection Mechanism']",software uses primary channel administration restricted functionality properly protect channel,1,0
420,Unprotected Alternate Channel,"The software protects a primary channel, but it does not use the same level of protection for an alternate channel.",,Access Control,"['Gain Privileges or Assume Identity', 'Bypass Protection Mechanism']",software protects primary channel use level protection alternate channel,1,0
421,Race Condition During Access to Alternate Channel,"The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.",This creates a race condition that allows an attacker to access the channel before the authorized user does.,Access Control,"['Gain Privileges or Assume Identity', 'Bypass Protection Mechanism']",product opens alternate channel communicate authorized user channel accessible actors,1,0
422,Unprotected Windows Messaging Channel ('Shatter'),"The software does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.",,Access Control,"['Gain Privileges or Assume Identity', 'Bypass Protection Mechanism']",software properly verify source message windows messaging system running elevated privileges creating alternate channel attacker directly send message product,1,0
424,Improper Protection of Alternate Path,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.,,Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",product sufficiently protect possible paths user access restricted functionality resources,1,0
432,Dangerous Signal Handler not Disabled During Sensitive Operations,"The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.","During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.",Integrity,['Modify Application Data'],application uses signal handler shares state signal handlers properly mask prevent signal handlers invoked original signal handler still running,0,1
435,Improper Interaction Between Multiple Correctly-Behaving Entities,"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.","When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level.  However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.",Integrity,"['Unexpected State', 'Varies by Context']",interaction error occurs two entities correct behavior running independently integrated components larger system process introduce incorrect behaviors may cause resultant weaknesses,0,1
453,Insecure Default Variable Initialization,"The software, by default, initializes an internal variable with an insecure or less secure value than is possible.",,Integrity,['Modify Application Data'],software default initializes internal variable insecure less secure value possible,0,1
454,External Initialization of Trusted Variables or Data Stores,The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.,"A software system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.",Integrity,['Modify Application Data'],software initializes critical internal variables data stores using inputs modified untrusted actors,0,1
464,Addition of Data Structure Sentinel,The accidental addition of a data-structure sentinel can cause serious programming logic problems.,"Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",Integrity,['Modify Application Data'],accidental addition datastructure sentinel cause serious programming logic problems,0,1
471,Modification of Assumed-Immutable Data (MAID),The software does not properly protect an assumed-immutable element from being modified by an attacker.,"This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.",Integrity,"['Modify Application Data', 'Unexpected State']",software properly protect assumedimmutable element modified attacker,0,1
472,External Control of Assumed-Immutable Web Parameter,"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.","
            ",Integrity,['Modify Application Data'],web application sufficiently verify inputs assumed immutable actually externally controllable hidden form fields,0,1
473,PHP External Variable Modification,"A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",,Integrity,['Modify Application Data'],php application properly protect modification variables external sources query parameters cookies expose application numerous weaknesses would exist otherwise,0,1
478,Missing Default Case in Switch Statement,"The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses.","This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.",Integrity,"['Varies by Context', 'Alter Execution Logic']",code default case switch statement might lead complex logical errors resultant weaknesses,0,1
495,Private Data Structure Returned From A Public Method,"The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",,Integrity,['Modify Application Data'],product method declared public returns reference private data structure could modified unexpected ways,0,1
496,Public Data Assigned to Private Array-Typed Field,Assigning public data to a private array is equivalent to giving public access to the array.,,Integrity,['Modify Application Data'],assigning public data private array equivalent giving public access array,0,1
498,Cloneable Class Containing Sensitive Information,"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.","Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.",Access Control,['Bypass Protection Mechanism'],code contains class sensitive data class cloneable data accessed cloning class,1,0
501,Trust Boundary Violation,The product mixes trusted and untrusted data in the same data structure or structured message.,"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.",Access Control,['Bypass Protection Mechanism'],product mixes trusted untrusted data data structure structured message,1,0
520,.NET Misconfiguration: Use of Impersonation,Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.,".NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.",Access Control,['Gain Privileges or Assume Identity'],allowing net application run potentially escalated levels access underlying operating file systems dangerous result various forms attacks,1,0
521,Weak Password Requirements,"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.,Access Control,['Gain Privileges or Assume Identity'],product require users strong passwords makes easier attackers compromise user accounts,1,0
522,Insufficiently Protected Credentials,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",,Access Control,['Gain Privileges or Assume Identity'],product transmits stores authentication credentials uses insecure method susceptible unauthorized interception andor retrieval,1,0
523,Unprotected Transport of Credentials,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.,,Access Control,['Gain Privileges or Assume Identity'],login pages use adequate measures protect user password transit client server,1,0
549,Missing Password Field Masking,"The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",,Access Control,['Bypass Protection Mechanism'],software mask passwords entry increasing potential attackers observe capture passwords,1,0
551,Incorrect Behavior Order: Authorization Before Parsing and Canonicalization,"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.","For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.",Access Control,['Bypass Protection Mechanism'],web server fully parse requested urls examines authorization may possible attacker bypass authorization protection,1,0
554,ASP.NET Misconfiguration: Not Using Input Validation Framework,The ASP.NET application does not use an input validation framework.,,Integrity,['Unexpected State'],aspnet application use input validation framework,0,1
555,J2EE Misconfiguration: Plaintext Password in Configuration File,The J2EE application stores a plaintext password in a configuration file.,"Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.",Access Control,['Bypass Protection Mechanism'],j2ee application stores plaintext password configuration file,1,0
556,ASP.NET Misconfiguration: Use of Identity Impersonation,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.,The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.,Access Control,['Gain Privileges or Assume Identity'],configuring aspnet application run impersonated credentials may give application unnecessary privileges,1,0
565,Reliance on Cookies without Validation and Integrity Checking,"The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.","Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.",Access Control,['Gain Privileges or Assume Identity'],application relies existence values cookies performing securitycritical operations properly ensure setting valid associated user,1,0
582,"Array Declared Public, Final, and Static","The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.","Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.",Integrity,['Modify Application Data'],program declares array public final static sufficient prevent arrays contents modified,0,1
603,Use of Client-Side Authentication,"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.",Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.,Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",clientserver product performs authentication within client code server code allowing serverside authentication bypassed via modified client omits authentication check,1,0
607,Public Static Final Field References Mutable Object,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",,Integrity,['Modify Application Data'],public protected static final field references mutable object allows object changed malicious code accidentally another package,0,1
613,Insufficient Session Expiration,"According to WASC, ""Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""",,Access Control,['Bypass Protection Mechanism'],according wasc insufficient session expiration web site permits attacker reuse old session credentials session ids authorization,1,0
620,Unverified Password Change,"When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.","This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",setting new password user product require knowledge original password using another form authentication,1,0
621,Variable Extraction Error,"The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.","
            ",Integrity,['Modify Application Data'],product uses external input determine names variables information extracted without verifying names specified variables valid could cause program overwrite unintended variables,0,1
622,Improper Validation of Function Hook Arguments,"The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.","Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.",Integrity,['Unexpected State'],product adds hooks useraccessible api functions properly validate arguments could lead resultant vulnerabilities,0,1
625,Permissive Regular Expression,The product uses a regular expression that does not sufficiently restrict the set of allowed values.,"
            ",Access Control,['Bypass Protection Mechanism'],product uses regular expression sufficiently restrict set allowed values,1,0
626,Null Byte Interaction Error (Poison Null Byte),The product does not properly handle null bytes or NUL characters when passing data between different representations or components.,"
            ",Integrity,['Unexpected State'],product properly handle null bytes nul characters passing data different representations components,0,1
636,Not Failing Securely ('Failing Open'),"When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.","By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to ""fail functional"" to minimize administration and support costs, instead of ""failing safe.""",Access Control,['Bypass Protection Mechanism'],product encounters error condition failure design requires fall back state less secure options available selecting weakest encryption algorithm using permissive access control restrictions,1,0
639,Authorization Bypass Through User-Controlled Key,The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.,"
            ",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity', 'Gain Privileges or Assume Identity']",systems authorization functionality prevent user gaining access another users data record modifying key value identifying data,1,0
649,Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking,"The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified.","When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.",Integrity,['Unexpected State'],software uses obfuscation encryption inputs mutable external actor software use integrity checks detect inputs modified,0,1
653,Insufficient Compartmentalization,"The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions.","When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.",Access Control,"['Gain Privileges or Assume Identity', 'Bypass Protection Mechanism']",product sufficiently compartmentalize functionality processes require different privilege levels rights permissions,1,0
655,Insufficient Psychological Acceptability,"The software has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",,Access Control,['Bypass Protection Mechanism'],software protection mechanism difficult inconvenient use encouraging nonmalicious users disable bypass mechanism whether accident purpose,1,0
693,Protection Mechanism Failure,The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.,"This weakness covers three distinct situations. A ""missing"" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An ""insufficient"" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an ""ignored"" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.",Access Control,['Bypass Protection Mechanism'],product use incorrectly uses protection mechanism provides sufficient defense directed attacks product,1,0
696,Incorrect Behavior Order,"The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",,Integrity,['Alter Execution Logic'],product performs multiple related behaviors behaviors performed wrong order ways may produce resultant weaknesses,0,1
757,Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade'),"A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.","When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.",Access Control,['Bypass Protection Mechanism'],protocol implementation supports interaction multiple actors allows actors negotiate algorithm used protection mechanism encryption authentication select strongest algorithm available parties,1,0
759,Use of a One-Way Hash without a Salt,"The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input.","
            ",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",software uses oneway cryptographic hash input reversible password software use salt part input,1,0
760,Use of a One-Way Hash with a Predictable Salt,"The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input.","
            ",Access Control,['Bypass Protection Mechanism'],software uses oneway cryptographic hash input reversible password software uses predictable salt part input,1,0
780,Use of RSA Algorithm without OAEP,"The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.",Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.,Access Control,['Bypass Protection Mechanism'],software uses rsa algorithm incorporate optimal asymmetric encryption padding oaep might weaken encryption,1,0
784,Reliance on Cookies without Validation and Integrity Checking in a Security Decision,"The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.","Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",application uses protection mechanism relies existence values cookie properly ensure cookie valid associated user,1,0
790,Improper Filtering of Special Elements,"The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",,Integrity,['Unexpected State'],software receives data upstream component filter incorrectly filters special elements sending downstream component,0,1
791,Incomplete Filtering of Special Elements,"The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",,Integrity,['Unexpected State'],software receives data upstream component completely filter special elements sending downstream component,0,1
792,Incomplete Filtering of One or More Instances of Special Elements,"The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.","
            ",Integrity,['Unexpected State'],software receives data upstream component completely filter instances special elements sending downstream component,0,1
793,Only Filtering One Instance of a Special Element,"The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.","Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.",Integrity,['Unexpected State'],software receives data upstream component filters single instance special element sending downstream component,0,1
794,Incomplete Filtering of Multiple Instances of Special Elements,"The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.","
            ",Integrity,['Unexpected State'],software receives data upstream component filter instances special element sending downstream component,0,1
795,Only Filtering Special Elements at a Specified Location,"The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.","
            ",Integrity,['Unexpected State'],software receives data upstream component accounts special elements specified location thereby missing remaining special elements may exist sending downstream component,0,1
796,Only Filtering Special Elements Relative to a Marker,"The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. ""at the beginning/end of a string; the second argument""), thereby missing remaining special elements that may exist before sending it to a downstream component.",,Integrity,['Unexpected State'],software receives data upstream component accounts special elements positioned relative marker beginningend string second argument thereby missing remaining special elements may exist sending downstream component,0,1
797,Only Filtering Special Elements at an Absolute Position,"The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. ""byte number 10""), thereby missing remaining special elements that may exist before sending it to a downstream component.",,Integrity,['Unexpected State'],software receives data upstream component accounts special elements absolute position byte number 10 thereby missing remaining special elements may exist sending downstream component,0,1
836,Use of Password Hash Instead of Password for Authentication,"The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.","
            ",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",software records password hashes data store receives hash password client compares supplied hash hash obtained data store,1,0
842,Placement of User into Incorrect Group,The software or the administrator places a user into an incorrect group.,"If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.",Access Control,['Gain Privileges or Assume Identity'],software administrator places user incorrect group,1,0
916,Use of Password Hash With Insufficient Computational Effort,"The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.","
            ",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity']",software generates hash password uses scheme provide sufficient level computational effort would make password cracking attacks infeasible expensive,1,0
925,Improper Verification of Intent by Broadcast Receiver,The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.,"Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.",Integrity,['Gain Privileges or Assume Identity'],android application uses broadcast receiver receives intent properly verify intent came authorized source,0,1
1021,Improper Restriction of Rendered UI Layers or Frames,"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.","A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.",Access Control,"['Gain Privileges or Assume Identity', 'Bypass Protection Mechanism', 'Read Application Data', 'Modify Application Data']",web application restrict incorrectly restricts frame objects ui layers belong another application domain lead user confusion interface user interacting,1,0
1037,Processor Optimization Removal or Modification of Security-critical Code,"The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",,Integrity,['Bypass Protection Mechanism'],developer builds securitycritical protection mechanism software processor optimizes execution program mechanism removed modified,0,1
1038,Insecure Automated Optimizations,"The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",,Integrity,['Alter Execution Logic'],product uses mechanism automatically optimizes code improve characteristic performance optimizations unintended side effect might violate intended security assumption,0,1
1039,Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations,"The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.","
            ",Integrity,['Bypass Protection Mechanism'],product uses automated mechanism machine learning recognize complex data inputs image audio particular concept category properly detect handle inputs modified constructed way causes mechanism detect different incorrect concept,0,1
1173,Improper Use of Validation Framework,"The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.","Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",Integrity,['Unexpected State'],application use incorrectly uses input validation framework provided source language independent library,0,1
1174,ASP.NET Misconfiguration: Improper Model Validation,"The ASP.NET application does not use, or incorrectly uses, the model validation framework.",,Integrity,['Unexpected State'],aspnet application use incorrectly uses model validation framework,0,1
1190,DMA Device Enabled Too Early in Boot Phase,"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.","
            ",Access Control,"['Bypass Protection Mechanism', 'Modify Memory']",product enables direct memory access dma capable device security configuration settings established allows attacker extract data gain privileges product,1,0
1192,"System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers","The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.","
	   ",Access Control,['Bypass Protection Mechanism'],systemonchip soc unique immutable identifiers components,1,0
1193,Power-On of Untrusted Execution Core Before Enabling Fabric Access Control,The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.,"
	  ",Access Control,['Bypass Protection Mechanism'],product enables components contain untrusted firmware memory fabric access controls enabled,1,0
1222,Insufficient Granularity of Address Regions Protected by Register Locks,The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.,"
                ",Access Control,['Other'],product defines large address region protected modification register lock control bit results conflict functional requirement addresses need writable software operation security requirement system configuration lock bit must set boot process,1,0
1223,Race Condition for Write-Once Attributes,"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.","
                ",Access Control,['Bypass Protection Mechanism'],writeonce register hardware design programmable untrusted software component earlier trusted software component resulting race condition issue,1,0
1231,Improper Implementation of Lock Protection Registers,The product incorrectly implements register lock bit protection features such that protected controls can be programmed even after the lock has been set.,"
                ",Access Control,['Modify Memory'],product incorrectly implements register lock bit protection features protected controls programmed even lock set,1,0
1232,Improper Lock Behavior After Power State Transition,"Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.","
        ",Access Control,['Modify Memory'],register lock bit protection disables changes system configuration bit set protected registers lock bits become programmable power state transitions entry wake low power sleep modes causing system configuration changeable,1,0
1233,Improper Hardware Lock Protection for Security Sensitive Controls,The product implements a register lock bit protection feature that permits security sensitive controls to modify the protected configuration.,"
         	",Access Control,['Modify Memory'],product implements register lock bit protection feature permits security sensitive controls modify protected configuration,1,0
1234,Hardware Internal or Debug Modes Allow Override of Locks,System configuration protection may be bypassed during debug mode.,"
     	",Access Control,['Bypass Protection Mechanism'],system configuration protection may bypassed debug mode,1,0
1256,Hardware Features Enable Physical Attacks from Software,Software-controllable device functionality such as power and clock management permits unauthorized modification of memory or register bits.,"
                ",Integrity,"['Modify Memory', 'Modify Application Data', 'Bypass Protection Mechanism']",softwarecontrollable device functionality power clock management permits unauthorized modification memory register bits,0,1
1265,Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls,"During execution of non-reentrant code, the software performs a call that unintentionally produces a nested invocation of the non-reentrant code.","In complex software, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently of concern in software that executes script from untrusted sources. Examples of such software are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call.",Integrity,['Unexpected State'],execution nonreentrant code software performs call unintentionally produces nested invocation nonreentrant code,0,1
1282,Assumed-Immutable Data is Stored in Writable Memory,"Immutable data, such as a first-stage bootloader, device identifiers, and ""write-once"" configuration settings are stored in writable memory that can be re-programmed or updated in the field.","
				",Integrity,['Varies by Context'],immutable data firststage bootloader device identifiers writeonce configuration settings stored writable memory reprogrammed updated field,0,1
1298,Hardware Logic Contains Race Conditions,A race condition in the hardware logic results in undermining security guarantees of the system.,"
				",Access Control,"['Bypass Protection Mechanism', 'Gain Privileges or Assume Identity', 'Alter Execution Logic']",race condition hardware logic results undermining security guarantees system,1,0
1315,Improper Setting of Bus Controlling Capability in Fabric End-point,The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.,"
				",Access Control,"['Modify Memory', 'Read Memory', 'Bypass Protection Mechanism']",bus controller enables bits fabric endpoint allow responder devices control transactions fabric,1,0
